import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from tokens import token, user_token


user_list = {}


class UserStatus(Enum):
    IDLE = 'idle'
    DATA_UPDATING = 'data_updating'


def check_or_create_user(user_id):
    if user_id in user_list:
        return True
    user = {
        'data': {
            'age': {},
            'sex': {},
            'city': {},
        },
        'status': UserStatus.IDLE.value
    }
    user_list.update({user_id: user})
    return False

def update_status(user_id, status):
    user = user_list.get(user_id)

    user['status'] = status.value
    user_list.update({user_id: user})

def search_users(sex, age, city):
    all_candidates = []
    link_profile = 'https://vk.com/id'
    vk = vk_api.VkApi(token=user_token)
    response = vk.method('users.search',
                          {'sex': sex,
                           'status': 1,
                           'age': age,
                           'photo': 1,
                           'count': 25,
                           'online': 1,
                           'city': city
                           })
    for element in response['items']:
        person = [
            element['first_name'],
            element['last_name'],
            link_profile + str(element['id']),
            element['id']
        ]
        all_candidates.append(person)
    return all_candidates

def get_photo(user_id):
    vk_ = vk_api.VkApi(token=user_token)
    try:
        response = vk_.method('photos.get',
                              {
                                  'access_token': user_token,
                                  'owner_id': user_owner_id,
                                  'album_id': 'profile',
                              })
    except ApiError:
        return False
    users_photos = []
    for i in range(10):
        try:
            users_photos.append(
                [response['items'][i],
                 'photo' + str(response['items'][i]['owner_id']) + '_' + str(response['items'][i]['id'])])
        except IndexError:
            users_photos.append(['фото отсутствует'])
    return users_photos
